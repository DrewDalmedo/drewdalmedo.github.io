{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to my ongoing exploration of personal operations, systems thinking, and antifragile approaches to life and software development. This site serves as a personal knowledge repository of experimental and empirically-tested ideas.</p>"},{"location":"#about-these-notes","title":"About These Notes","text":"<p>The notes here document my experiences with various systems and processes, with a particular focus on the intersection of Linux, Nix, and principled software development. Each entry represents tested approaches rather than theoretical ideals - I believe in learning through direct experience and careful observation.</p>"},{"location":"#philosophical-foundation","title":"Philosophical Foundation","text":"<p>Much of my thinking is influenced by Nassim Nicholas Taleb's work on antifragility, via negativa, black swans, and the importance of \"skin in the game.\" These principles shape not just how I approach software development, but how I document and share knowledge.</p>"},{"location":"#site-philosophy","title":"Site Philosophy","text":"<p>Consider this site a living document - it will grow and evolve as I continue to test ideas and refine processes. Everything here is based on direct experience, with a focus on what actually works rather than what should work in theory.</p>"},{"location":"#important-note","title":"Important Note","text":"<p>These are empirical notes, not prescriptive guides. The approaches documented here represent what has worked in my specific context, based on direct experimentation and observation. Results may vary depending on the specifics of your circumstances, natural inclinations, etc. </p> <p>In other words: these guides aren't for everyone and shouldn't be taken as techno-gospel.</p>"},{"location":"Misc/mermaid-diagrams/","title":"Mermaid Diagram Examples","text":"<p>Flowchart:</p> <pre><code>graph TD\n    A[Start] --&gt; B[Process]\n    B --&gt; C{Decision}\n    C --&gt;|Yes| D[Result 1]\n    C --&gt;|No| E[Result 2]</code></pre> <p>Sequence diagram:</p> <pre><code>sequenceDiagram\n    Alice-&gt;&gt;John: Hello John\n    John--&gt;&gt;Alice: Hi Alice\n    Alice-&gt;&gt;John: How are you?\n    John--&gt;&gt;Alice: Great!</code></pre> <p>State diagram:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; Draft\n    Draft --&gt; Review\n    Review --&gt; Published\n    Published --&gt; [*]</code></pre> <p>Class diagram:</p> <pre><code>classDiagram\n    User \"1\" --&gt; \"*\" Note\n    class User{\n        +String name\n        +createNote()\n    }\n    class Note{\n        +String content\n        +DateTime created\n    }</code></pre> <p>Timeline:</p> <pre><code>timeline\n    title Project Timeline\n    section Phase 1\n        Research : Initial research\n        Planning : Create plan\n    section Phase 2\n        Development : Start coding\n        Testing : Test features</code></pre> <p>Gantt chart:</p> <pre><code>gantt\n    title Project Schedule\n    dateFormat  YYYY-MM-DD\n    section Planning\n    Research           :2024-01-01, 10d\n    Documentation     :2024-01-11, 5d</code></pre>"},{"location":"Misc/original-index/","title":"Mkdocs Basics","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Misc/original-index/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Misc/original-index/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Personal/fedora-setup/","title":"Fedora Linux + Nix","text":""},{"location":"Personal/fedora-setup/#initializing-the-environment","title":"Initializing the environment","text":"<p>First, download the live CD and flash it to a USB with Fedora Media Writer</p> <p>Afterwards, boot into the live USB and complete the setup process from beginning to end (disk partitioning -&gt; setting up your user account).</p>"},{"location":"Personal/fedora-setup/#installing-nix","title":"Installing Nix","text":"<p>Open a terminal. Copy and paste the command below to run the Determinate Systems Nix Installer:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install\n</code></pre> <p>If the above command doesn't work, you can find the installer's instructions here.</p> <p>After installing Nix, make sure Nix is in your path by closing and reopening your terminal. Then, ensure Nix is installed properly by running the following:</p> <pre><code>nix run nixpkgs#hello\n</code></pre> <p>You should see <code>Hello, world!</code> appear on your screen after a few moments.</p>"},{"location":"Personal/fedora-setup/#installing-home-manager","title":"Installing home-manager","text":"<p>With Nix installed, you can now install home-manager. Run the following command in your terminal:</p> <pre><code>nix run home-manager/master -- init --switch\n</code></pre> <p>This should set up a flake.nix in the <code>~/.config/home-manager</code> directory.</p> <p>(NOTE: Special thanks to Red Tomato's Blog for the elegant one-liner to install home-manager. It supposedly came from the home-manager docs, but I couldn't find it on first glance.)</p>"},{"location":"Personal/fedora-setup/#installing-nixvim-and-devenv","title":"Installing Nixvim and Devenv","text":"<p>Now that we have home-manager as a flake, we can now install software such as Nixvim and Devenv. For my own reference I'll be using my personal Nixvim config, but I highly encourage you to make your own or to fork mine and make whatever additions or changes you would like to it. </p> <p>To edit our home-manager config inside of my Nixvim config, run the following command:</p> <pre><code>nix run github:DrewDalmedo/nixvimrc -- .\n</code></pre> <p>Then, replace your flake.nix with the following:</p> <pre><code>{\n\n  # ...\n\n\n  inputs = {\n    # ...\n\n    nixvimrc.url = \"github:DrewDalmedo/nixvimrc\";\n  };\n\n\n  # ...\n\n\n  outputs = { nixpkgs, home-manager, nixvimrc, ... }:\n    let\n      # ...\n    in {\n      homeConfiguration.\"yourusername\" = home-manager.lib.homeManagerConfiguration {\n        # ...\n\n        extraSpecialArgs = {\n          inherit nixvimrc;\n        };\n      };\n    };\n}\n</code></pre> <p>The key components are the extra line at the end of inputs, the addition of nixvimrc to set of inputs to outputs, and the extraSpecialArgs block.</p> <p>Finally, open <code>home.nix</code> and enter the following:</p> <pre><code>  home.packages = [\n\n    # ...\n\n    nixvimrc.packages.\"x86_64-linux\".default\n    pkgs.ripgrep\n    pkgs.nerd-fonts.ubuntu-mono\n\n    pkgs.devenv\n  ];\n\n  fonts.fontconfig.enable = true;\n</code></pre> <p>Now, simply run the following command to install everything:</p> <pre><code>home-manager switch\n</code></pre>"},{"location":"Personal/fedora-setup/#optional-cleaning-up-after-installation","title":"(Optional) Cleaning up after installation","text":"<p>To clean up the unused packages on your system, you can simply run:</p> <pre><code>nix-collect-garbage -d\n</code></pre> <p>This will remove unneeded packages such as the <code>hello</code> package we used earlier to test if Nix was installed correctly.</p>"},{"location":"Personal/fedora-setup/#references","title":"References","text":"<ul> <li>Fedora Media Writer</li> <li>Determinate System Nix Installer</li> <li>Red Tomato's Blog</li> <li>My Nixvim Config</li> <li>Devenv</li> </ul>"},{"location":"Personal/university-setup/","title":"Optimal Learning for Undergrad-level Computer Science","text":"<p>I am currently attending NJIT as a fourth-year undergrad CS student. These have been my experiences as a student:</p>"},{"location":"Personal/university-setup/#the-necessity-of-windows","title":"The Necessity of Windows","text":"<p>Windows is an unfortunate fact-of-life at NJIT: most classes mandate the use of the Respondus Lockdown Browser, and some require that you install it on your personal laptop(!) for assignments as small as quizzes. This software is only available for Windows and macOS as of the time I'm writing this (2024-11-30).</p> <p>This alone carries a non-negligible security risk, but the alternative offered to students is to simply accept zeroes on all exams / assignments which require Lockdown Browser (which, mind you, often comprise more than 15% of our grade each). Simply refusing to use Lockdown Browser is not an option.</p> <p>The other alternative, trying to sandbox Lockdown Browser in a VM and / or Wine under Linux, carries the potential for virtualization detection and automatic failing of the course as a whole and potential expulsion from the university. This alternative, while theoretically possible, is categorically too risky for consideration.</p> <p>This creates a need to run both modern Windows (10/11 at time of writing) and Lockdown Browser on bare metal.</p> <p><code>NOTE: Everything below here is incomplete.</code></p>"},{"location":"Personal/university-setup/#the-need-for-an-open-development-ecosystem","title":"The Need for an Open Development Ecosystem","text":""},{"location":"Personal/university-setup/#the-hidden-fragilities-of-macos","title":"The Hidden Fragilities of macOS","text":"<p>Pros:</p> <ul> <li>Comfortable UI</li> <li>Lockdown Browser compatibility</li> <li>iOS App Development Optionality</li> <li>Industry standard for a reason</li> </ul> <p>Cons:</p> <ul> <li>Lack of control AND practical optionality over your desktop environment</li> <li>Changing development requirements (all desktop apps need to be signed, etc)</li> <li>Lack of true ownership over hardware and development experience</li> <li>Suboptimal high cost of hardware (even with education discount) for university years</li> </ul>"},{"location":"Personal/university-setup/#linux-as-hormesis","title":"Linux as Hormesis","text":"<p>Linux provides the following:</p> <ul> <li>Difficult installation on certain distros</li> <li>Semi-frequent debugging of environment and applications</li> <li>Inconsistent support of hardware</li> <li>Steep initial learning-curve</li> </ul> <p>However, what seems like a disadvantage and a headache turns into a major advantage you'll have going into the job market:</p> <ul> <li>Experience with:<ul> <li>a Unix-like command-line (coreutils, compilers, build tools, etc)</li> <li>Solving non-obvious configuration issues</li> <li>Editors and tooling which are available everywhere ((neo)vim, emacs, etc.)</li> </ul> </li> <li>Deep intuition for how Unix-like systems work at a fundamental level</li> <li>Knowledge of how software interacts with the most common server operating systems</li> </ul> <p>When used alone, you're almost certain to crash and burn. However, when you use Linux with a backup OS, you maintain the upside of learning Linux while eliminating the downside that would be having an unusable system.</p>"},{"location":"Personal/university-setup/#the-optimal-development-barbell-windows-ltsc-fedora-linux-nix-home-manager","title":"The Optimal Development Barbell: Windows LTSC, Fedora Linux, Nix &amp; home-manager","text":"<p>Here's a high-level overview of what an ideal system would look like:</p> <pre><code>flowchart TD\n    A[Laptop] --&gt; B[Windows LTSC]\n    B --&gt; C[Lockdown Browser]\n    A --&gt; D[Fedora]\n    D --&gt; E[Browser, utils, etc]\n    D --&gt; F[Nix / home-manager]\n    F --&gt; G[Nixvim / Neovim Configuration]\n    F --&gt; H[Devenv]</code></pre>"},{"location":"Personal/university-setup/#references","title":"References","text":"<ul> <li>Respondus Lockdown Browser</li> <li>Central Washington University - Lockdown Browser Security Risk Assessment</li> </ul>"}]}